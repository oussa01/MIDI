openapi: 3.0.3
info:
  title: Lyrics Midi App
  description: >
    'This is a ***MIDI app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io).
    Description supports markdown markup. For example, you can use the `inline code` using back ticks.'
  termsOfService: https://github.com/oussa01/MIDI/blob/main/LICENSE
  contact:
    email: oussama.omrani2@gmail.com
  license:
    name: MIT
    url: https://github.com/oussa01/MIDI/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Any document link you want to generate along with API.
  url: http://swagger.io
servers:
  - url: https://midi.swagger.io/v2
tags:
  - name: midi
    description: Everything about Rap
    externalDocs:
      description: Find out more (extra document link)
      url: http://swagger.io
  - name: order
    description: Operation about orders
  - name: customer
    description: Operations about user's persona customer
  - name: address
    description: Operations about user's address
  - name: payment
    description: Operations about payments
  - name: shipment
    description: Operations about shippings
  - name: product
    description: Operations about products
  - name: user
    description: Operations about signup, signin and so on
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          xml:
            name: User
    SignInReq:
      description: Request body for Sign-in
      type: object
      properties:
        username:
          description: username of the User
          type: string
        password:
          description: password of the User
          type: string
    SignedInUser:
      description: Signed-in user information
      type: object
      properties:
        refreshToken:
          description: Refresh Token
          type: string
        accessToken:
          description: JWT Token aka access token
          type: string
        username:
          description: User Name
          type: string
        userId:
          description: User Identifier
          type: string
    RefreshToken:
      description: Contains the refresh token
      type: object
      properties:
        refreshToken:
          description: Refresh Token
          type: string
paths:
  /api/v1/register:
    post:
      tags:
        - user
      summary: Signup the User
      description: Creates a new user, who can login and do the contributions.
      operationId: signUp
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: For successful user creation.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SignedInUser'
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
  /api/v1/auth/token:
    post:
      tags:
        - user
      summary: Signin the customer (user)
      description: Signin the user that generates the JWT (access token) and refresh token, which can be used for accessing APIs.
      operationId: signIn
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/SignInReq'
          application/json:
            schema:
              $ref: '#/components/schemas/SignInReq'
      responses:
        200:
          description: For user sign-in. Once successful, user receives the access and refresh token.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SignedInUser'
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
    delete:
      tags:
        - user
      summary: Signouts the contributor (user)
      description: Signouts the contributor (user). It removes the refresh token from DB. Last issued JWT should be removed from client end that if not removed last for given expiration time.
      operationId: signOut
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        202:
          description: Accepts the request for logout.
  /api/v1/auth/token/refresh:
    post:
      tags:
        - user
      summary: Provides new JWT based on valid refresh token.
      description: Provides new JWT based on valid refresh token.
      operationId: getAccessToken
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        200:
          description: For successful operation.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SignedInUser'
            application/json:
              schema:
                $ref: '#/components/schemas/SignedInUser'
